include:
  # main template
  - project: 'gitlab-ci-templates/mkdocs'
    ref: '1.2.0'
    file: '/templates/gitlab-ci-mkdocs.yml'
  # GitLab pages variant
  - project: 'gitlab-ci-templates/mkdocs'
    ref: '1.2.0'
    file: '/templates/gitlab-ci-mkdocs-pages.yml'

  # Gitleaks template
  - project: "to-be-continuous/gitleaks"
    ref: "1.2.1"
    file: "templates/gitlab-ci-gitleaks.yml"
  #- project: "to-be-continuous/sonar"
  #  ref: "1.3.2"
  #  file: "templates/gitlab-ci-sonar.yml"
  - project: 'security-dashboard/security-dashboard-template'
    ref: '0.1.21'
    file: '/templates/gitlab-ci-security-dashboard-template.yml'


variables:
  MKD_REQUIREMENTS: "mkdocs-material"
  DOCKER_VERSION: "17.12"
  # Because we use a private Registry to pull the dind image. Explanation: https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/issues/1676#note_15233339
  DOCKER_HOST: tcp://dockerproxy-iva.si.francetelecom.fr-docker:2375
  # Force a better storage driver because we use dind (https://docs.gitlab.com/ce/ci/docker/using_docker_build.html#using-the-overlayfs-driver)
  DOCKER_DRIVER: overlay2
  DOCKER_PROXY_HOST: dockerproxy.repos.tech.orange
  DOCKER_LOGIN: $ARTIFACTORY_USERNAME
  DOCKER_PASSWORD: $ARTIFACTORY_PASSWORD
  CUSTOM_CA_CERTS: $SONAR_CA_CERTS
  # DOCKER_REGISTRY_UNSTABLE: "dockerfactory-unstable-iva.si.francetelecom.fr"
  DOCKER_REGISTRY_UNSTABLE: "optisam-it-virt-docker-unstable.repos.tech.orange"
  # DOCKER_REGISTRY_STABLE: "dockerfactory-iva.si.francetelecom.fr"
  DOCKER_REGISTRY_STABLE: "optisam-it-virt-docker-stable.repos.tech.orange"
  NG_VERSION: "8.3.17"
  SONAR_TOKEN: $SONAR_TOKEN
  no_proxy: localhost,127.0.0.1,.francetelecom.fr,.ftgroup,.orange-labs.fr,.tech.orange,.intraorange
  DEFECTDOJO_SERVER_URL: "https://defectdojo.dos.tech.orange"
  DEFECTDOJO_API_KEY: "f5da7d6e48ce1da8885cd98d2560bdfad565b0c0"
  DEFECTDOJO_SONARQUBE_APPLICATION: optisam-ui
  DEFECTDOJO_SONARQUBE_PROJECT_KEY: optisam_optisam-it_optisam-ui_AX-v2mp7ZwVr9_lB_09g
  DEFECTDOJO_NOTIFICATION: "true"
  DEFECTDOJO_NOTIFICATION_SEVERITIES: "Critical,High"
  DEFECTDOJO_GITLEAKS_REPORT: gitleaks/gitleaks-report.json
  GITLEAKS_IMAGE: "zricethezav/gitleaks:v7.6.1"    


sonarqube-check:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - /^release-.*$/i
    - /^develop-.*$/i
    - /^performance-.*$/i
    - develop-defectdojo


defectdojo:
  rules:
# exclude merge requests 
    - if: $CI_MERGE_REQUEST_ID 
      when: never 
    - when: always


stages:
  - init
  - test
  - build
  - package
  - deploy
  - deploy_prod
  - publish

.ng-scripts: &ng-scripts | 
  # BEGSCRIPT
  set -e 

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function install_ca_certs() {
      certs=$1
      if [[ -z "$certs" ]]
      then
        return
      fi
      # import in system
      if echo "$certs" >> /etc/ssl/certs/ca-certificates.crt
      then
        log_info "CA certificates imported in \\e[33;1m/etc/ssl/certs/ca-certificates.crt\\e[0m"
      fi
      if echo "$certs" >> /etc/ssl/cert.pem
      then
        log_info "CA certificates imported in \\e[33;1m/etc/ssl/cert.pem\\e[0m"
      fi

      # import in Java keystore (if keytool command found)
      if command -v keytool > /dev/null
      then
        # shellcheck disable=SC2046
        javahome=${JAVA_HOME:-$(dirname $(readlink -f $(command -v java)))/..}
        # shellcheck disable=SC2086
        keystore=${JAVA_KEYSTORE_PATH:-$(ls -1 $javahome/jre/lib/security/cacerts 2>/dev/null || ls -1 $javahome/lib/security/cacerts 2>/dev/null || echo "")}
        if [[ -f "$keystore" ]]
        then
          storepass=${JAVA_KEYSTORE_PASSWORD:-changeit}
          nb_certs=$(echo "$certs" | grep -c 'END CERTIFICATE')
          log_info "importing $nb_certs certificates in Java keystore \\e[33;1m$keystore\\e[0m..."
          for idx in $(seq 0 $((nb_certs - 1)))
          do
            # TODO: use keytool option -trustcacerts ?
            if echo "$certs" | awk "n==$idx { print }; /END CERTIFICATE/ { n++ }" | keytool -noprompt -import -alias "imported CA Cert $idx" -keystore "$keystore" -storepass "$storepass"
            then
              log_info "... CA certificate [$idx] successfully imported"
            else
              log_warn "... Failed importing CA certificate [$idx]: abort"
              return
            fi
          done
        else
          log_warn "Java keystore \\e[33;1m$keystore\\e[0m not found: could not import CA certificates"
        fi
      fi
    } 

  # ENDSCRIPT


init-job:
  stage: init
  image: optisam-it-virt-docker-stable.repos.tech.orange/optisam/git-bash
  artifacts:
    when: always
    expire_in: 1d
    paths:
      - shared-vars.sh
  script:
    - >
      if [[ "$CI_COMMIT_REF_NAME" = performance-v* ]]; then
        touch shared-vars.sh
        chmod 777 shared-vars.sh
        echo "export TAG=performance;" >> shared-vars.sh
        echo "export ENV=performance;" >> shared-vars.sh
        echo "export DOCKER_REGISTRY=$DOCKER_REGISTRY_UNSTABLE;" >> shared-vars.sh
        echo "export OCP_URL=$OCP_URL_PERFORMANCE;" >> shared-vars.sh
        echo "export OCP_PROJECT=$OCP_PROJECT_PERFORMANCE;" >> shared-vars.sh
        echo "export OCP_TOKEN=$OCP_TOKEN_PERFORMANCE;" >> shared-vars.sh
      elif [[ "$CI_COMMIT_REF_NAME" = develop-v* ]]; then
        touch shared-vars.sh
        chmod 777 shared-vars.sh
        echo "export TAG=dev;" >> shared-vars.sh
        echo "export ENV=dev;" >> shared-vars.sh
        echo "export DOCKER_REGISTRY=$DOCKER_REGISTRY_UNSTABLE;" >> shared-vars.sh
        echo "export OCP_URL=$OCP_URL_DEV;" >> shared-vars.sh
        echo "export OCP_PROJECT=$OCP_PROJECT_DEV;" >> shared-vars.sh
        echo "export OCP_TOKEN=$OCP_TOKEN_DEV;" >> shared-vars.sh
      elif [[ "$CI_COMMIT_REF_NAME" = release-v* ]]; then
        touch shared-vars.sh
        chmod 777 shared-vars.sh      
        echo "export ENV=int;" >> shared-vars.sh
        echo "export TAG=latest;" >> shared-vars.sh
        echo "export DOCKER_REGISTRY=$DOCKER_REGISTRY_UNSTABLE;" >> shared-vars.sh
        echo "export OCP_URL=$OCP_URL_INT;" >> shared-vars.sh
        echo "export OCP_PROJECT=$OCP_PROJECT_INT;" >> shared-vars.sh
        echo "export OCP_TOKEN=$OCP_TOKEN_INT;" >> shared-vars.sh
      elif [ "$CI_COMMIT_TAG" != "" ]; then
        touch shared-vars.sh
        chmod 777 shared-vars.sh      
        echo "export ENV=int;" >> shared-vars.sh
        echo "export TAG=$CI_COMMIT_TAG;" >> shared-vars.sh
        echo "export DOCKER_REGISTRY=$DOCKER_REGISTRY_STABLE;" >> shared-vars.sh
        echo "export OCP_URL=$OCP_URL_INT;" >> shared-vars.sh
        echo "export OCP_PROJECT=$OCP_PROJECT_INT;" >> shared-vars.sh
        echo "export OCP_TOKEN=$OCP_TOKEN_INT;" >> shared-vars.sh
      else
        touch shared-vars.sh
        chmod 777 shared-vars.sh      
        echo "export ENV=dev;" >> shared-vars.sh
        echo "export TAG=dev;" >> shared-vars.sh
        echo "export DOCKER_REGISTRY=$DOCKER_REGISTRY_UNSTABLE;" >> shared-vars.sh
        echo "export OCP_URL=$OCP_URL_DEV;" >> shared-vars.sh
        echo "export OCP_PROJECT=$OCP_PROJECT_DEV;" >> shared-vars.sh
        echo "export OCP_TOKEN=$OCP_TOKEN_DEV;" >> shared-vars.sh
      fi  
  only:
#    - develop
    - /^develop-.*$/i
    - /^release-.*$/i
    - /^performance-.*$/i
    - tags
    - merge_requests

.ui-template:
  before_script:
    - echo "Angular CICD"
    - ls -lrt
    - . ./shared-vars.sh

ui-install:
  stage: init
  image: ${DOCKER_PROXY_HOST}/trion/ng-cli:${NG_VERSION}
  artifacts:
    paths:
      - node_modules
    expire_in: 2 hours
  script:
    - npm ci
  only:
 #   - develop-*
    - /^develop-.*$/i
    - /^performance-.*$/i
    - /^release-.*$/i
    - tags
    - merge_requests


# ui-lint:
#   stage: test
#   extends: .ui-template
#   image: ${DOCKER_PROXY_HOST}/trion/ng-cli:${NG_VERSION}
#   artifacts:
#     reports:
#       junit: ${CI_PROJECT_DIR}/tslint-results.json
#     paths:
#       - ${CI_PROJECT_DIR}/tslint-results.json
#     expire_in: 3d
#   script:
#     - touch ${CI_PROJECT_DIR}/tslint-results.json
#     - ng lint --format=json > ${CI_PROJECT_DIR}/tslint-results.json
#   only:
#     - develop
#     - master
#     - tags
#     - merge_requests
#   allow_failure: true


ui-test:
  stage: test
  extends: .ui-template
  image: ${DOCKER_PROXY_HOST}/trion/ng-cli-karma:${NG_VERSION}
  dependencies:
    - init-job
    - ui-install
  artifacts:
    when: always
    reports:
      junit: ${CI_PROJECT_DIR}/coverage/coverage-final.json
    paths:
      - ${CI_PROJECT_DIR}/coverage
    expire_in: 3d
  script:
    - ng test --code-coverage --watch=false
  coverage: '/^Statements\s*:\s*([^%]+)/'
  only:
    #- develop-*
    # - master
    - /^develop-.*$/i
    - /^release-.*$/i
    - /^performance-.*$/i
    - tags
    - merge_requests

ui-build:
  stage: build
  extends: .ui-template
  image: ${DOCKER_PROXY_HOST}/trion/ng-cli:${NG_VERSION}
  dependencies:
    - init-job
    - ui-install
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/ui_service/dist/
    expire_in: 3d
  script:
    - node --version
    - ng --version
    - npm rebuild node-sass
    - ng build --prod --output-path ${CI_PROJECT_DIR}/ui_service/dist/ --output-hashing=all
  only:
   # - develop-*
    - /^develop-.*$/i
    - /^release-.*$/i
    - /^performance-.*$/i
    - tags
    - merge_requests

ui-package:
  stage: package
  extends: .ui-template
  dependencies:
    - init-job
    - ui-build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo $DOCKER_AUTH_CONFIG > /kaniko/.docker/config.json
     #    - echo "{\"auths\":{\"$DOCKER_REGISTRY\":{\"username\":\"$DOCKER_LOGIN\",\"password\":\"$DOCKER_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination ${DOCKER_REGISTRY}/optisam-it/ui-service:$TAG
  only:
 #   - develop-*
    - /^develop-.*$/i
    - /^performance-.*$/i
    - /^release-.*$/i
    - tags

ui-deploy-noprod:
  stage: deploy
  extends: .ui-template
  image: ${DOCKER_PROXY_HOST}/openshift/origin-cli:v3.11
  dependencies:
    - init-job
  script:
    - echo "Creating Openshift Resources"
    - oc login ${OCP_URL}  --token=${OCP_TOKEN}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT}
    - oc create configmap config-ui-$ENV --from-file=src/assets/config/${ENV}/configuration.json -o yaml --dry-run | oc apply -f -
    - oc delete deploymentconfig optisam-ui
    - oc process -f ui-service.yml -p TAG=$TAG -p ENV=$ENV -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  only:
 #   - develop-*
    - /^develop-.*$/i
    - /^performance-.*$/i
    - /^release-.*$/i
    - tags
   
ui-deploy-prod:
  stage: deploy_prod
  when: manual
  extends: .ui-template
  image: ${DOCKER_PROXY_HOST}/openshift/origin-cli:v3.11
  dependencies:
    - init-job
  script:
    - echo "Creating Openshift Resources"
    - oc login ${OCP_URL_PROD}  --token=${OCP_TOKEN_PROD}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT_PROD}
    - oc create configmap config-ui-prod --from-file=src/assets/config/prod/configuration.json -o yaml --dry-run | oc apply -f -
    - oc process -f ui-service.yml -p TAG=$TAG -p ENV=prod -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  only:
    - tags


pages:
  stage: publish
  extends: .ui-template
  image: ${DOCKER_PROXY_HOST}/trion/ng-cli:${NG_VERSION}
  artifacts:
    expire_in: 3d
    paths:
      - public
  before_script:
    - npm install -g @compodoc/compodoc
  script:
    - mkdir .public
    - npx compodoc --tsconfig tsconfig.json --output ${CI_PROJECT_DIR}/documentation
    - ls -lrt ${CI_PROJECT_DIR}
    - cp -r ${CI_PROJECT_DIR}/documentation .public
    - cp -r ${CI_PROJECT_DIR}/coverage .public
    - cp -r ${MKD_WORKSPACE_DIR:-.}/${MKD_SITE_DIR:-site}/* .public/
    - mv .public public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_COMMIT_REF_NAME

#  only:
#    - develop
    # - master
#  when: always


# ui-sonar:
#   stage: publish
#   extends: .ui-template
#   image: 
#     name: ${DOCKER_PROXY_HOST}/sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   # variables:
#   #   JAVA_KEYSTORE_PATH: "/usr/lib/sonar-scanner/jre/lib/security/cacerts"
#   before_script:
#     - *ng-scripts
#     - install_ca_certs "${CUSTOM_CA_CERTS:-$DEFAULT_CA_CERTS}"
#   script:
#     - sonar-scanner -Dproject.settings=sonar-scanner.properties -Dsonar.projectKey=ui-service -Dsonar.login=${SONAR_TOKEN} -Dsonar.branch.name=${CI_COMMIT_BRANCH}	-X
#   only:
#     - develop
#     # - master
#     - tags
#     # - merge_requests
#   when: always
